/*
 * This file is generated by jOOQ.
 */
package com.okeicalm.simpleJournalEntry.infra.db.tables


import com.okeicalm.simpleJournalEntry.infra.db.SimpleJournalEntryDb
import com.okeicalm.simpleJournalEntry.infra.db.indexes.ARTICLES_ACCOUNT_ID
import com.okeicalm.simpleJournalEntry.infra.db.keys.ARTICLES_IBFK_1
import com.okeicalm.simpleJournalEntry.infra.db.keys.KEY_ARTICLES_PRIMARY
import com.okeicalm.simpleJournalEntry.infra.db.tables.records.ArticlesRecord

import java.time.LocalDate

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Articles(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ArticlesRecord>?,
    aliased: Table<ArticlesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ArticlesRecord>(
    alias,
    SimpleJournalEntryDb.SIMPLE_JOURNAL_ENTRY_DB,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>simple_journal_entry_db.articles</code>
         */
        val ARTICLES: Articles = Articles()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ArticlesRecord> = ArticlesRecord::class.java

    /**
     * The column <code>simple_journal_entry_db.articles.id</code>.
     */
    val ID: TableField<ArticlesRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>simple_journal_entry_db.articles.account_id</code>.
     */
    val ACCOUNT_ID: TableField<ArticlesRecord, Long?> = createField(DSL.name("account_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>simple_journal_entry_db.articles.title</code>.
     */
    val TITLE: TableField<ArticlesRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>simple_journal_entry_db.articles.content</code>.
     */
    val CONTENT: TableField<ArticlesRecord, String?> = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>simple_journal_entry_db.articles.created_at</code>.
     */
    val CREATED_AT: TableField<ArticlesRecord, LocalDate?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>simple_journal_entry_db.articles.updated_at</code>.
     */
    val UPDATED_AT: TableField<ArticlesRecord, LocalDate?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATE.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ArticlesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ArticlesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>simple_journal_entry_db.articles</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>simple_journal_entry_db.articles</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>simple_journal_entry_db.articles</code> table reference
     */
    constructor(): this(DSL.name("articles"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ArticlesRecord>): this(Internal.createPathAlias(child, key), child, key, ARTICLES, null)
    override fun getSchema(): Schema? = if (aliased()) null else SimpleJournalEntryDb.SIMPLE_JOURNAL_ENTRY_DB
    override fun getIndexes(): List<Index> = listOf(ARTICLES_ACCOUNT_ID)
    override fun getIdentity(): Identity<ArticlesRecord, Long?> = super.getIdentity() as Identity<ArticlesRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<ArticlesRecord> = KEY_ARTICLES_PRIMARY
    override fun getReferences(): List<ForeignKey<ArticlesRecord, *>> = listOf(ARTICLES_IBFK_1)

    private lateinit var _articles: Articles
    fun articles(): Articles {
        if (!this::_articles.isInitialized)
            _articles = Articles(this, ARTICLES_IBFK_1)

        return _articles;
    }
    override fun `as`(alias: String): Articles = Articles(DSL.name(alias), this)
    override fun `as`(alias: Name): Articles = Articles(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Articles = Articles(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Articles = Articles(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Long?, Long?, String?, String?, LocalDate?, LocalDate?> = super.fieldsRow() as Row6<Long?, Long?, String?, String?, LocalDate?, LocalDate?>
}
